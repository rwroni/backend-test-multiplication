// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	request "project-name/app/usecase/sample/request"

	mock "github.com/stretchr/testify/mock"

	response "project-name/app/usecase/sample/response"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// HitExternalAPI provides a mock function with given fields: in
func (_m *UseCase) HitExternalAPI(in request.HitExternalAPIRequest) (response.ReadResponse, int, string, error) {
	ret := _m.Called(in)

	var r0 response.ReadResponse
	if rf, ok := ret.Get(0).(func(request.HitExternalAPIRequest) response.ReadResponse); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(response.ReadResponse)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.HitExternalAPIRequest) int); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(request.HitExternalAPIRequest) string); ok {
		r2 = rf(in)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(request.HitExternalAPIRequest) error); ok {
		r3 = rf(in)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// M32 provides a mock function with given fields: in
func (_m *UseCase) M32(in request.MBOnBoardingRequest) (response.MBOnBoardingResponse, int, string, error) {
	ret := _m.Called(in)

	var r0 response.MBOnBoardingResponse
	if rf, ok := ret.Get(0).(func(request.MBOnBoardingRequest) response.MBOnBoardingResponse); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(response.MBOnBoardingResponse)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.MBOnBoardingRequest) int); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(request.MBOnBoardingRequest) string); ok {
		r2 = rf(in)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(request.MBOnBoardingRequest) error); ok {
		r3 = rf(in)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// M37 provides a mock function with given fields: in
func (_m *UseCase) M37(in request.MBOnBoardingRequest) (response.MBOnBoardingResponse, int, string, error) {
	ret := _m.Called(in)

	var r0 response.MBOnBoardingResponse
	if rf, ok := ret.Get(0).(func(request.MBOnBoardingRequest) response.MBOnBoardingResponse); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(response.MBOnBoardingResponse)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.MBOnBoardingRequest) int); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(request.MBOnBoardingRequest) string); ok {
		r2 = rf(in)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(request.MBOnBoardingRequest) error); ok {
		r3 = rf(in)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// QueryJoin provides a mock function with given fields: in
func (_m *UseCase) QueryJoin(in request.QueryJoinRequest) (response.QueryJoinResponse, int, string, error) {
	ret := _m.Called(in)

	var r0 response.QueryJoinResponse
	if rf, ok := ret.Get(0).(func(request.QueryJoinRequest) response.QueryJoinResponse); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(response.QueryJoinResponse)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.QueryJoinRequest) int); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(request.QueryJoinRequest) string); ok {
		r2 = rf(in)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(request.QueryJoinRequest) error); ok {
		r3 = rf(in)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Read provides a mock function with given fields: in
func (_m *UseCase) Read(in request.SampleRequest) (response.ReadResponse, int, string, error) {
	ret := _m.Called(in)

	var r0 response.ReadResponse
	if rf, ok := ret.Get(0).(func(request.SampleRequest) response.ReadResponse); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(response.ReadResponse)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.SampleRequest) int); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(request.SampleRequest) string); ok {
		r2 = rf(in)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(request.SampleRequest) error); ok {
		r3 = rf(in)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
